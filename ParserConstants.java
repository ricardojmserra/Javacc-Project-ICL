/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LET = 5;
  /** RegularExpression Id. */
  int STRING = 6;
  /** RegularExpression Id. */
  int EXCLAMATION = 7;
  /** RegularExpression Id. */
  int MUT = 8;
  /** RegularExpression Id. */
  int Num = 9;
  /** RegularExpression Id. */
  int PLUS = 10;
  /** RegularExpression Id. */
  int MINUS = 11;
  /** RegularExpression Id. */
  int TIMES = 12;
  /** RegularExpression Id. */
  int WHILE = 13;
  /** RegularExpression Id. */
  int PRINTLN = 14;
  /** RegularExpression Id. */
  int PRINT = 15;
  /** RegularExpression Id. */
  int NEW = 16;
  /** RegularExpression Id. */
  int IF = 17;
  /** RegularExpression Id. */
  int THEN = 18;
  /** RegularExpression Id. */
  int ELSE = 19;
  /** RegularExpression Id. */
  int END = 20;
  /** RegularExpression Id. */
  int DO = 21;
  /** RegularExpression Id. */
  int DIV = 22;
  /** RegularExpression Id. */
  int LPAR = 23;
  /** RegularExpression Id. */
  int RPAR = 24;
  /** RegularExpression Id. */
  int L_CB = 25;
  /** RegularExpression Id. */
  int R_cb = 26;
  /** RegularExpression Id. */
  int OP_ATRIB = 27;
  /** RegularExpression Id. */
  int OP_EQUAL = 28;
  /** RegularExpression Id. */
  int OP_NEQUAL = 29;
  /** RegularExpression Id. */
  int LTE = 30;
  /** RegularExpression Id. */
  int GTE = 31;
  /** RegularExpression Id. */
  int EQUAL = 32;
  /** RegularExpression Id. */
  int FIM = 33;
  /** RegularExpression Id. */
  int SCOLIN = 34;
  /** RegularExpression Id. */
  int LT = 35;
  /** RegularExpression Id. */
  int GT = 36;
  /** RegularExpression Id. */
  int AND = 37;
  /** RegularExpression Id. */
  int OR = 38;
  /** RegularExpression Id. */
  int TRUE = 39;
  /** RegularExpression Id. */
  int FALSE = 40;
  /** RegularExpression Id. */
  int NOT = 41;
  /** RegularExpression Id. */
  int Id = 42;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"let\"",
    "<STRING>",
    "\"!\"",
    "\"mut\"",
    "<Num>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"while\"",
    "\"println\"",
    "\"print\"",
    "\"new\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"end\"",
    "\"do\"",
    "\"/\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\":=\"",
    "\"==\"",
    "\"~=\"",
    "\"<=\"",
    "\">=\"",
    "\"=\"",
    "\";;\"",
    "\";\"",
    "\"<\"",
    "\">\"",
    "\"&&\"",
    "\"||\"",
    "\"true\"",
    "\"false\"",
    "\"~\"",
    "<Id>",
  };

}
